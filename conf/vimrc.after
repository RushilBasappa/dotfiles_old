let mapleader = ","
nnoremap <leader><space> :nohlsearch<CR>

"  General Config {{{
inoremap jk <esc>
nmap ; :
set autoread
set backspace=indent,eol,start " allow backspacing over autoindent, kunebreak, start of insert
set clipboard=unnamed
set hidden
set nobackup
set noeb vb t_vb=   " disable beeping/flashing
set noswapfile
set nowrap
syntax enable

" Searching
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set ignorecase
set smartcase
" }}}

" UI Config {{{
filetype plugin indent on      " load filetype-specific indent files
set cursorline " highlight current line
set lazyredraw " redraw only when we need to
set number   " show line numbers
set showcmd  " show command in bottom bar
set showmatch      " highlight matching [{()}]
set t_Co=256                   " set to a 256 color scheme
set wildmenu                   " visual autocomplete for command menu

" let g:rehash256 = 1
let g:molokai_original = 1
" }}}

" ColorScheme{{{
let g:molokai_original = 1
colorscheme molokai
"}}}

" Leader Shortcuts {{{
let mapleader = ","
nnoremap <leader><space> :nohlsearch<CR>
" nnoremap <leader>u :GundoToggle<CR>
" }}}

" Spaces and Tabs {{{
set expandtab     " tabs are spaces
set shiftwidth=2  " text is indented with the reindent operations (<< and >>)
set softtabstop=2 " number of spaces in tab -> insert mode
set tabstop=2     " number of spaces in tab -> visual mode
" }}}

" Folding {{{
set foldenable
set foldnestmax=10
nnoremap <space> za
set modelines=1
" }}}

" Highlight{{{
hi Comment cterm=italic
hi LineNr ctermfg=grey ctermbg=NONE
hi! link xmlAttrib htmlArg
highlight htmlArg ctermfg=NONE ctermbg=NONE cterm=italic
"}}}

" Movement {{{
" move vertically by visual line
noremap j gj
nnoremap k gk

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" highlight last inserted text
nnoremap gV `[v`]
" }}}

" Navigate split screens {{{
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" }}}

" Edit/Load vim {{{
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ea :vsp ~/.vimrc.after<CR>
nnoremap <leader>ez :vsp ~/.zshrc<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
" }}}

" EasyAlign {{{
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
" }}}

" vim macros @{{{
let @a = 'F lvE,atob``'
let @b = 'F lvE,btoa``'
"}}}

" Control P {{{
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0
let g:ctrlp_working_path_mode = 0
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
" }}}

" Shift lines{{{
" Insert mode
inoremap <C-j> <ESC>:m .+1<CR>==gi
inoremap <C-k> <ESC>:m .-2<CR>==gi

" Visual mode
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
"}}}


" scrooloose/nerdtree{{{
  nnoremap <silent> <leader>n :NERDTreeToggle<cr>
  nnoremap <silent> <leader>f :NERDTreeFind<CR>
  let g:NERDTreeDirArrowExpandable = 'â–¸'
  let g:NERDTreeDirArrowCollapsible = 'â–¾'
  autocmd StdinReadPre * let s:std_in=1
  " open a NERDTree automatically when vim starts up if no files were specified and focus the editor window
  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
  " close vim if the only window left open is a NERDTree
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"}}}

" ntpeters/vim-better-whitespace{{{
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1"}}}

" Load vim.after {{{
if filereadable(expand("~/.vimrc.after"))
  " source ~/.vimrc.after
endif
"}}}

" AutoLoad vimrc on save{{{
if has("autocmd")
  " autocmd bufwritepost .vimrc source $MYVIMRC
endif
"}}}

let g:hcl_fmt_autosave = 0
let g:tf_fmt_autosave = 0
let g:nomad_fmt_autosave = 0

let g:multi_cursor_exit_from_visual_mode = 0
let g:multi_cursor_exit_from_insert_mode = 0


" ================ Reference Links ==================== {{{
" https://dougblack.io/words/a-good-vimrc.html
" http://items.sjbach.com/319/configuring-vim-right
" http://nvie.com/posts/how-i-boosted-my-vim/
" https://github.com/skwp/dotfiles/blob/master/vimrc
" https://dockyard.com/blog/2013/09/26/vim-moving-lines-aint-hard
" https://github.com/tomasr/dotfiles/blob/master/.vimrc
" http://blog.smalleycreative.com/tutorials/using-git-and-github-to-manage-your-dotfiles/
" https://medium.com/@victormours/a-better-nerdtree-setup-3d3921abc0b9#.pcv71vmsu
" }}}


" modeline for folding
" vim:foldmethod=marker:foldlevel=0
